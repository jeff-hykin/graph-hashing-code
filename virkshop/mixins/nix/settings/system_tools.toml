# 
# 
# warehouses (packages come from warehouses)
# 
# 
[defaultWarehouse]
config = '''{
    "allowUnfree": true,
    "cudaSupport": true,
    "permittedInsecurePackages": [ "openssl-1.0.2u" ]
}'''
from = { tarFileUrl = "https://github.com/NixOS/nixpkgs/archive/c82b46413401efa740a0b994f52e9903a4f6dcd5.tar.gz" }
as = "$defaultWarehouse"

[[warehouses]]
config = '''{}'''
from = { tarFileUrl = "https://github.com/NixOS/nixpkgs/archive/141439f6f11537ee349a58aaf97a5a5fc072365c.tar.gz" }
as = "$warehouseWithTorch_1_8_1"

[[warehouses]]
config = '''{}'''
from = { tarFileUrl = "https://github.com/NixOS/nixpkgs/archive/2cdd608fab0af07647da29634627a42852a8c97f.tar.gz" }
as = "$warehouseWithNcclCudaToolkit_11_2"

[[warehouses]]
config = '''{}'''
from = { tarFileUrl = "https://github.com/NixOS/nixpkgs/archive/c82b46413401efa740a0b994f52e9903a4f6dcd5.tar.gz" }
as = "$warehouseForCuda"


# 
# 
# compute values
# 
# 

# isLinux
[[computeValues]]
as = "$isLinux"
command = [ "deno", "eval", '''console.log(JSON.stringify(Deno.build.os=="linux"))''' ]
[[computeValues.buildInputs]]
load = [ "deno" ]
from = { tarFileUrl = "https://github.com/NixOS/nixpkgs/archive/c82b46413401efa740a0b994f52e9903a4f6dcd5.tar.gz" }

# isMac
[[computeValues]]
as = "$isMac"
command = [ "deno", "eval", '''console.log(JSON.stringify(Deno.build.os=="darwin"))''' ]
[[computeValues.buildInputs]]
load = [ "deno" ]
from = { tarFileUrl = "https://github.com/NixOS/nixpkgs/archive/c82b46413401efa740a0b994f52e9903a4f6dcd5.tar.gz" }



# 
# 
# 
# packages
# 
# 
# 
[[packages]]
from = '''$warehouseForCuda'''
load = [ "python38",]
as = "$python"
asBuildInput = true

[[packages]]
from = '''$warehouseForCuda'''
load = [ "python38Packages",]
as = "$pythonPackages"
asBuildInput = true

[[packages]]
from = '''$pythonPackages'''
load = [ "black",]
asBuildInput = true

[[packages]]
from = '''$pythonPackages'''
load = [ "poetry",]
asBuildInput = true

[[packages]]
from = '''$pythonPackages'''
load = [ "setuptools",]
asBuildInput = true

[[packages]]
from = '''$pythonPackages'''
load = [ "pybullet",]
onlyIf = '''$isLinux'''
asBuildInput = true

[[packages]]
from = '''$pythonPackages'''
load = [ "pyopengl",]
onlyIf = '''$isLinux'''
asBuildInput = true

[[packages]]
from = '''$pythonPackages'''
load = [ "pip",]
asBuildInput = true

[[packages]]
from = '''$pythonPackages'''
load = [ "virtualenv",]
asBuildInput = true

[[packages]]
from = '''$pythonPackages'''
load = [ "wheel",]
asBuildInput = true

[[packages]]
# the newer version of shap is broken for some reason so this links to an older one
from = { tarFileUrl = "https://github.com/NixOS/nixpkgs/archive/3f50332bc4913a56ad216ca01f5d0bd24277a6b2.tar.gz" }
load = [ "python38Packages", "shap",]
asBuildInput = true

# 
# pytorch needs cuda, so its got a lot of extra work
# 
[[packages]]
onlyIf = '''$isLinux'''
from = '''$warehouseForCuda'''
load = [ "cudaPackages", "cudatoolkit_11_2" ]
as = "$cudatoolkit"
asBuildInput = true

[[packages]]
onlyIf = '''$isLinux'''
from = '''$warehouseWithNcclCudaToolkit_11_2'''
load = [ "nccl_cudatoolkit_11" ]
as = "$nccl"

[[packages]]
onlyIf = '''$isLinux'''
from = '''$warehouseForCuda'''
load = [ "cudnn_cudatoolkit_11_2" ]
as = "$cudnn"
asBuildInput = true

[[packages]]
onlyIf = '''$isLinux'''
from = '''$warehouseForCuda'''
load = [ "magma" ]
override = '''{ "cudatoolkit": $cudatoolkit }'''
as = "$magma"

[[packages]]
onlyIf = '''$isLinux'''
from = '''$warehouseForCuda'''
load = [ "linuxPackages", "nvidia_x11" ]
override = '''{
    "cudaSupport": true,
    "cudatoolkit": $cudatoolkit,
    "cudnn": $cudnn,
    "nccl": $nccl,
    "magma": $magma
}'''
as = "$nvidiaX11"
asBuildInput = true

[[packages]]
onlyIf = '''$isLinux'''
from = '''$pythonPackages'''
load = [ "pytorchWithCuda" ]
override = '''{
    "cudaSupport": true,
    "cudatoolkit": $cudatoolkit,
    "cudnn": $cudnn,
    "nccl": $nccl,
    "magma": $magma
}'''
as = "$pytorch"
asBuildInput = true


# 
# project system packages
# 

[[packages]]
onlyIf = '''$isLinux'''
as = "$nvidiaDocker"
load = [ "nvidia-docker",]
from = { tarFileUrl = "https://github.com/NixOS/nixpkgs/archive/860b56be91fb874d48e23a950815969a7b832fbc.tar.gz" }
asBuildInput = true

[[packages]]
load = [ "geos",] # for carla_env
asNativeBuildInput = true

[[packages]]
load = [ "zellij",]
asBuildInput = true

[[packages]]
load = [ "git-subrepo",]
asBuildInput = true

[[packages]]
load = [ "llvmPackages","openmp",]
asBuildInput = true # for carla

[[packages]]
load = [ "xdg-user-dirs",]
asBuildInput = true # for carla

[[packages]]
load = [ "xdg-utils",]
asBuildInput = true # for carla

[[packages]]
load = [ "xorg", "xhost",]
asBuildInput = true # for carla

[[packages]]
load = [ "freetype",]
asBuildInput = true

[[packages]]
load = [ "swig",]
asBuildInput = true

[[packages]]
load = [ "mpi",] # for the spinningup AI repo 
asBuildInput = true

[[packages]]
load = [ "curl",]
asBuildInput = true

# 
# Nvidia
# 
[[packages]]
onlyIf = '''$isLinux'''
from = { tarFileUrl = "https://github.com/guibou/nixGL/archive/17658df1e17a64bc23ee5c93cfa9e8b663a4ac81.tar.gz" }
load = [ "auto", "nixGLNvidia", ]
asBuildInput = true

# 
# for .so errors on linux with opencv+ffmpeg
# 

[[packages]]
onlyIf = '''$isLinux'''
from = '''$warehouseForCuda'''
load = [ "glib",]
asNativeBuildInput = true
asBuildInput = true

[[packages]]
onlyIf = '''$isLinux'''
load = [ "libglvnd",]
from = { tarFileUrl = "https://github.com/NixOS/nixpkgs/archive/559cf76fa3642106d9f23c9e845baf4d354be682.tar.gz" }
asNativeBuildInput = true

# 
# 
# 
# Need-to-build-from-source tools
#
# 
# 
# Note: most projects need these, 
# and if you need them for one project nix has a shared-memory across projects
# comment these out in a situation such as deploying a project to a minimal server

# 
# Linux
# 
[[packages]]
onlyIf = '''$isLinux'''
load = [ "pkgconfig",]
asNativeBuildInput = true

[[packages]]
onlyIf = '''$isLinux'''
load = [ "libconfig",]
asNativeBuildInput = true

[[packages]]
onlyIf = '''$isLinux'''
load = [ "cmake",]
asNativeBuildInput = true

[[packages]]
onlyIf = '''$isLinux'''
load = [ "stdenv", "cc",]
asBuildInput = true

# 
# Mac
# 
[[packages]]
onlyIf = '''$isMac'''
load = [ "xcbuild",]
asNativeBuildInput = true

[[packages]]
onlyIf = '''$isMac'''
load = [ "xcodebuild",]
asNativeBuildInput = true

[[packages]]
onlyIf = '''$isMac'''
load = [ "darwin", "libobjc", ]
asNativeBuildInput = true

[[packages]]
onlyIf = '''$isMac'''
load = [ "darwin", "apple_sdk", "frameworks", "CoreServices" ]
asNativeBuildInput = true

[[packages]]
onlyIf = '''$isMac'''
load = [ "darwin", "apple_sdk", "frameworks", "CoreFoundation" ]
asNativeBuildInput = true

[[packages]]
onlyIf = '''$isMac'''
load = [ "darwin", "apple_sdk", "frameworks", "Foundation" ]
asNativeBuildInput = true

[[packages]]
onlyIf = '''$isMac'''
load = [ "darwin", "apple_sdk", "frameworks", "AVKit" ]
asNativeBuildInput = true

[[packages]]
onlyIf = '''$isMac'''
load = [ "darwin", "apple_sdk", "frameworks", "AppKit" ]
asNativeBuildInput = true

[[packages]]
onlyIf = '''$isMac'''
load = [ "darwin", "apple_sdk", "frameworks", "WebKit" ]
asNativeBuildInput = true

[[packages]]
onlyIf = '''$isMac'''
load = [ "darwin", "apple_sdk", "frameworks", "Accounts" ]
asNativeBuildInput = true

[[packages]]
onlyIf = '''$isMac'''
load = [ "darwin", "apple_sdk", "frameworks", "Security" ]
asNativeBuildInput = true

# 
# both often need
# 
[[packages]]
load = [ "gcc",]
asBuildInput = true

[[packages]]
load = [ "libkrb5",]
asBuildInput = true

# 
# 
# common dependencies
# 
# 

[[packages]]
load = [ "fd",]
asBuildInput = true

[[packages]]
load = [ "ncurses5",]
asBuildInput = true

[[packages]]
load = [ "openssh",]
asBuildInput = true

[[packages]]
load = [ "sd",]
asBuildInput = true

[[packages]]
load = [ "dua",]
asBuildInput = true

[[packages]]
load = [ "tealdeer",]
asBuildInput = true

[[packages]]
load = [ "bottom",]
asBuildInput = true

[[packages]]
load = [ "exa",]
asBuildInput = true

[[packages]]
load = [ "zsh",]
asBuildInput = true

[[packages]]
load = [ "zsh-syntax-highlighting",]
asBuildInput = true

[[packages]]
load = [ "oh-my-zsh",]
asBuildInput = true

[[packages]]
load = [ "zsh-autosuggestions",]
asBuildInput = true

[[packages]]
load = [ "spaceship-prompt",]
asBuildInput = true

[[packages]]
load = [ "nnn",]
asBuildInput = true

[[packages]]
onlyIf = '''$isLinux'''
load = [ "pkgconfig",]
asNativeBuildInput = true

[[packages]]
onlyIf = '''$isLinux'''
load = [ "libconfig",]
asNativeBuildInput = true

[[packages]]
onlyIf = '''$isLinux'''
load = [ "cmake",]
asNativeBuildInput = true

[[packages]]
onlyIf = '''$isLinux'''
load = [ "libGLU",]
asBuildInput = true

[[packages]]
onlyIf = '''$isLinux'''
load = [ "xvfb-run",]
asBuildInput = true

[[packages]]
onlyIf = '''$isLinux'''
load = [ "stdenv", "cc",]
asBuildInput = true

#
#
# Basic Commandline tools
#
#

[[packages]]
load = [ "man",]
asBuildInput = true

[[packages]]
load = [ "coreutils",]
asBuildInput = true

[[packages]]
load = [ "ripgrep",]
asBuildInput = true

[[packages]]
load = [ "which",]
asBuildInput = true

[[packages]]
load = [ "git",]
asBuildInput = true

[[packages]]
load = [ "colorls",]
asBuildInput = true

[[packages]]
load = [ "tree",]
asBuildInput = true

[[packages]]
load = [ "less",]
asBuildInput = true

[[packages]]
load = [ "nano",]
asBuildInput = true

[[packages]]
load = [ "unzip",]
asBuildInput = true

[[packages]]
load = [ "zip",]
asBuildInput = true

[[packages]]
load = [ "findutils",]
asBuildInput = true

[[packages]]
load = [ "wget",]
asBuildInput = true

[[packages]]
load = [ "curl",]
asBuildInput = true

[[packages]]
load = [ "unixtools", "arp",]
asBuildInput = true

[[packages]]
load = [ "unixtools", "ifconfig",]
asBuildInput = true

[[packages]]
load = [ "unixtools", "netstat",]
asBuildInput = true

[[packages]]
load = [ "unixtools", "ping",]
asBuildInput = true

[[packages]]
load = [ "unixtools", "route",]
asBuildInput = true

[[packages]]
load = [ "unixtools", "col",]
asBuildInput = true

[[packages]]
load = [ "unixtools", "column",]
asBuildInput = true

[[packages]]
load = [ "unixtools", "fdisk",]
asBuildInput = true

[[packages]]
load = [ "unixtools", "fsck",]
asBuildInput = true

[[packages]]
load = [ "unixtools", "getconf",]
asBuildInput = true

[[packages]]
load = [ "unixtools", "getent",]
asBuildInput = true

[[packages]]
load = [ "unixtools", "getopt",]
asBuildInput = true

[[packages]]
load = [ "unixtools", "hexdump",]
asBuildInput = true

[[packages]]
load = [ "unixtools", "hostname",]
asBuildInput = true

[[packages]]
load = [ "unixtools", "killall",]
asBuildInput = true

[[packages]]
load = [ "unixtools", "locale",]
asBuildInput = true

[[packages]]
load = [ "unixtools", "more",]
asBuildInput = true

[[packages]]
load = [ "unixtools", "mount",]
asBuildInput = true

[[packages]]
load = [ "unixtools", "ps",]
asBuildInput = true

[[packages]]
load = [ "unixtools", "quota",]
asBuildInput = true

[[packages]]
load = [ "unixtools", "script",]
asBuildInput = true

[[packages]]
load = [ "unixtools", "sysctl",]
asBuildInput = true

[[packages]]
load = [ "unixtools", "top",]
asBuildInput = true

[[packages]]
load = [ "unixtools", "umount",]
asBuildInput = true

[[packages]]
load = [ "unixtools", "whereis",]
asBuildInput = true

[[packages]]
load = [ "unixtools", "write",]
asBuildInput = true

[[packages]]
load = [ "unixtools", "xxd",]
asBuildInput = true

# 
# inner core
# 
[[packages]]
# keep deno pinned even if the main warehouse changes
from = { tarFileUrl = "https://github.com/NixOS/nixpkgs/archive/c82b46413401efa740a0b994f52e9903a4f6dcd5.tar.gz" }
load = [ "deno",]
asBuildInput = true

[[packages]]
load = [ "jq",]
asBuildInput = true

[[packages]]
load = [ "nix",]
asBuildInput = true