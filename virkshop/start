#!/usr/bin/env bash

# 
# 
# What is this file doing?
# 
# 
    # 1. finding the "enter_virkshop" file
    # 2. trying to install nix (this is the guesses-have-to-be-made part)
    # 3. execute the "enter_virkshop" file with a specific executable

{ # <- Prevent execution if this script was only partially downloaded

# dependencies (some depend on the OS): command, uname, echo, printf, cat, read, dirname, uname, chmod, sh, sed, curl, sw_vers, pidof, whoami, mktemp, rm, basename, xz, mkdir, tar


# saftey/cleanup
if [ -n "$(command -v "trap")" ] # <- if trap exists
then
    trap 'unset repo; unset branch; unset setup_or_copy; unset mixin_remote_name' INT TERM
fi

# 
# 
# Setup colors
# 
# 
newline='
'
# do-nothing functions
black      () { :; }
red        () { :; }
green      () { :; }
yellow     () { :; }
blue       () { :; }
magenta    () { :; }
cyan       () { :; }
white      () { :; }
color_reset() { :; }
# if tput exists
if [ -n "$(command -v "tput")" ]
then
    black      () { tput setaf 0; }
    red        () { tput setaf 1; }
    green      () { tput setaf 2; }
    yellow     () { tput setaf 3; }
    blue       () { tput setaf 4; }
    magenta    () { tput setaf 5; }
    cyan       () { tput setaf 6; }
    white      () { tput setaf 7; }
    color_reset() { tput sgr0; }
fi

# 
# Find our virkshop entrypoint
# 
path_to_virkshop_entry=""
file_name="virkshop/internals/enter_virkshop"
folder_to_look_in="$PWD"
while :
do
    # check if file exists
    if [ -f "$folder_to_look_in/$file_name" ]
    then
        path_to_virkshop_entry="$folder_to_look_in/$file_name"
        break
    else
        if [ "$folder_to_look_in" = "/" ]
        then
            break
        else
            folder_to_look_in="$(dirname "$folder_to_look_in")"
        fi
    fi
done
if [ -z "$path_to_virkshop_entry" ]
then
    #
    # what to do if file never found
    #
    echo "$(yellow)"
    echo "|-- Problem -------------------------------------------------------------| $(color_reset)" 1>&2
    echo "|                                                                        |" 1>&2
    echo "|    Looks like you have nix installed (that's good)                     |" 1>&2
    echo "|                                                                        |" 1>&2
    echo "|    However, I can't find the virkshop/internals/enter_virkshop file    |" 1>&2
    echo "|    I started looking in your current folder                            |" 1>&2
    echo "|         current directory is: '$PWD'                                 " 1>&2
    echo "|    I also looked in all the parent folders, but couldn't find it       |" 1>&2
    echo "|                                                                        |" 1>&2
    echo "|    todo:                                                               |" 1>&2
    echo "|      - make sure you're in the right folder (very likely)              |" 1>&2
    echo "|      - make sure the virkshop folder isn't corrupted (re-download)     |" 1>&2
    echo "|                                                                        |" 1>&2
    echo "|------------------------------------------------------------------------|" 1>&2
    echo ""
    # TODO: in the future, offer to redownload (encase the script is being run directly from curl)
    # TODO: in the future, check if already inside of a virkshop (accidentally doing virkshop inception)
    exit
fi

# 
# 
# Color Test
# 
#
color_test_cache_location="$HOME/.config/answered_questions/does_color_test_work"
# check if already answered this questions
if [ -f "$color_test_cache_location" ]
then
    ANSWER="$(cat "$color_test_cache_location")"
fi
# ensure the answer is well-formed
while true; do
    case "$ANSWER" in
        [Yy]* ) ANSWER='yes'; break;;
        [Nn]* ) ANSWER='no'; break;;
        * ) echo "${newline}Please answer yes or no. ${newline}";;
    esac
    echo "                                   "
    echo "               COLOR TEST              "
    echo "          |------------------|"
    echo "          |     $(red) red $(color_reset)        |"
    echo "          |     $(green) green $(color_reset)      |"
    echo "          |     $(yellow) yellow $(color_reset)     |"
    echo "          |     $(blue) blue $(color_reset)       |"
    echo "          |     $(magenta) magenta $(color_reset)    |"
    echo "          |     $(cyan) cyan $(color_reset)       |"
    echo "          |------------------|"
    echo "     
          Does this look good?
  (there should be one color per line)
    "; printf "yes/no:";
    read ANSWER
done

# create the cache file
mkdir -p "$(dirname "$color_test_cache_location")"
echo "$ANSWER" > "$color_test_cache_location"
# NOTE: this^ doesn't cover the edgecase of one of the parent "folders"
#       actually being a file, which would cause a failure
#       in the future lets plan to to a corruption check on this structure

# 
# if colors don't work/look good
# 
if [ "$answer" = 'no' ]
then
    echo " :( Okay I'll disable color"
    black      () { :; }
    red        () { :; }
    green      () { :; }
    yellow     () { :; }
    blue       () { :; }
    magenta    () { :; }
    cyan       () { :; }
    white      () { :; }
    color_reset() { :; }
fi


# 
# if nix doesnt exist
# 
if [ -z "$(command -v "nix")" ]
then
    echo "|------------------------------------------------------|" 1>&2
    echo "|                                                      |" 1>&2
    echo "|    I'll try to install nix for you                   |" 1>&2
    echo "|    (since I don't see nix yet)                       |" 1>&2
    echo "|                                                      |" 1>&2
    echo "|------------------------------------------------------|" 1>&2
    echo ""
    # check for root
    if [ "$(whoami)" = "root" ]
    then
        echo "$(yellow)"
        echo "looks like you're logged in as root"
        echo "sadly nix can't install on the root user"
        echo "please use a regular user, then re-run this script"
        echo "$(color_reset)"
        # if users exists
        if [ -n "$(command -v "users")" ]
        then
            if [ -n "$(users)" ] && [ "$(users)" != "root" ]
            then
                echo "the available users are:"
                users
                echo 
                echo "you should be able to run $(cyan)su $(yellow)USER_NAME$(color_reset)"
                echo "to login as one of those users"
            else
                echo ""
                echo "it looks like this system doesn't have any regular users"
                
                # if useradd exists
                if [ -n "$(command -v "useradd")" ]
                then
                    question="do you want me to make a regular user for you? [y/n]";answer=''
                    while true; do
                        echo "$question"; read response
                        case "$response" in
                            [Yy]* ) answer='yes'; break;;
                            [Nn]* ) answer='no'; break;;
                            * ) echo "Please answer yes or no.";;
                        esac
                    done
                    
                    if [ "$answer" = 'yes' ]; then
                        echo "$(magenta)Enter a username:$(color_reset)"
                        read username
                        if sudo useradd --create-home "$username" --password "password" --groups sudo
                        then
                            echo ""
                            echo "user created successfully"
                            echo "run:"
                            echo "    $(cyan)sudo passwd "$username"$(color_reset)"
                            echo "to set the password"
                        else
                            echo ""
                            echo "Sorry, there was an error when creating the user"
                            echo "I used this command: $(cyan)sudo useradd --create-home "'"'"$username"'"'" --password 'password' --groups sudo$(color_reset)"
                        fi
                    else
                        echo "Okay"
                    fi
                fi
                
            fi
        fi
    fi
    #       
    # MacOS 
    #
    if [ "$(uname)" = "Darwin" ]
    then
        debugging_info="$debugging_info$newline""I think you have a Mac because "'"$OSTYPE" = "darwin"*'" came back true"
        full_version="$(sw_vers -productVersion)"
        major_version="$(echo "$full_version" | sed -E 's/([0-9]+)\.[0-9]+\.[0-9]+/\1/g')"
        minor_version="$(echo "$full_version" | sed -E 's/[0-9]+\.([0-9]+)\.[0-9]+/\1/g')"
        #                  
        # Big Sur or Newer
        #                 
        if [ "$major_version" = "11" ]; then
            sh <(curl -Lk https://nixos.org/nix/install) --darwin-use-unencrypted-nix-store-volume
        #                  
        # Older than Big Sur (Catalina, Mojave, High Siera, Siera, etc)
        #                 
        elif [ "$major_version" -eq "10" ]; then
            # Catalina
            if [ "$minor_version" = "15" ]; then
                sh <(curl -Lk https://nixos.org/nix/install) --darwin-use-unencrypted-nix-store-volume
            # Mojave, High Siera, Siera, and might work on even older versions (Yosemite, Mavericks)
            else
                curl -Lk https://nixos.org/nix/install | sh -s -- --daemon
            fi
        else
            echo 'We tried to get you MacOS version by running `sw_vers -productVersion`'
            echo '(which returns '"$full_version"')'
            echo "Either 1. that value is empty 2. You're on an insanely old version 3. You're on a version way way in the future from when this script was made"
        fi
    # assuming Linux/POSIX if not on MacOS
    else
        # if curl doesnt exist, try to make it exist
        if [ -z "$(command -v "curl")" ]
        then
            # if apt-get exists
            if [ -n "$(command -v "apt-get")" ]
            then
                sudo apt-get update && sudo apt-get install curl
            else
                echo "it looks like you don't have curl, please install curl then re-run this script" 1>&2
                echo "alternatively, to get nix, manually run the commands inside https://nixos.org/nix/install" 1>&2
            fi
        fi
        
        # if now curl exists
        if [ -n "$(command -v "curl")" ]
        then
            # check if systemd exists
            if pidof systemd
            then
                # multi-user install if systemd exists
                curl -Lk https://nixos.org/nix/install | sh -s -- --daemon
            else
                # single-user install if systemd exists
                curl -Lk https://nixos.org/nix/install | sh -s
            fi
        fi
    fi
fi

# 
# if nix was not installed
# 
if ! [ -d "/nix/store" ]
then
    echo "$(yellow)"
    echo "|-- Problem ------------------------------------------------------------------------------------| $(color_reset)" 1>&2
    echo "|                                                                                               |" 1>&2
    echo "|    Looks like there was a problem installing nix :/                                           |" 1>&2
    echo "|    Hopefully there are error messages above                                                   |" 1>&2
    echo "|    If you want additional information about installing nix see:                               |" 1>&2
    echo "|         https://nixos.org/manual/nix/stable/#chap-installation                                |" 1>&2
    echo "|                                                                                               |" 1>&2
    echo "|-----------------------------------------------------------------------------------------------|" 1>&2
    echo ""
    exit
# if nix was installed (hopefully successfully)
else
    # 
    # manually update the shell environment 
    # 
    if [ -f "/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh" ]
    then
        . "/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh"
    fi
    if [ -f "$HOME/.nix-profile/etc/profile.d/nix.sh" ]
    then
        . "$HOME/.nix-profile/etc/profile.d/nix.sh"
    fi
    export PATH="$PATH:/nix/var/nix/profiles/default/bin/"
    
    # if nix-env doesnt exist
    if [ -z "$(command -v "nix-env")" ] || [ -z "$(command -v "nix-shell")" ]
    then
        echo "$(yellow)"
        echo "|-- Action Needed ------------------------------------------------------------------------------| $(color_reset)" 1>&2
        echo "|                                                                                               |" 1>&2
        echo "|    - Try closing/reopening your terminal and running this command again                       |" 1>&2
        echo "|      (I dont see the nix-env and nix-shell command)                                           |" 1>&2
        echo "|                                                                                               |" 1>&2
        echo "|    - If you already did that, and you're still getting this message                           |" 1>&2
        echo "|      then you might need to uninstall and reinstall nix                                       |" 1>&2
        echo "|      instructions here:                                                                       |" 1>&2
        echo "|         https://nixos.org/manual/nix/stable/#sect-single-user-installation                    |" 1>&2
        echo "|                                                                                               |" 1>&2
        echo "|-----------------------------------------------------------------------------------------------|" 1>&2
        echo ""
        exit
    fi
fi

# cleanup the variables
unset repo; unset branch; unset mixin_remote_name;

# 
# 
# Nix should now be installed => Enter the virkshop!
# 
# 

# make sure the file is executable
if [ -n "$(command -v "chmod")" ]
then
    # if sudo exists
    if [ -n "$(command -v "sudo")" ]
    then
        chmod ugo+x "$path_to_virkshop_entry" 2>/dev/null || sudo chmod ugo+x "$path_to_virkshop_entry"
    # if doas exists
    elif [ -n "$(command -v "doas")" ]
    then
        chmod ugo+x "$path_to_virkshop_entry" 2>/dev/null || sudo chmod ugo+x "$path_to_virkshop_entry"
    # if neither exist
    else
        chmod ugo+x "$path_to_virkshop_entry" 2>/dev/null
    fi
fi

# 
# parse and escape the arguments
# 
arguments_for_start_script="" # futureproofing encase this script needs args (verbose/debugging/alternatives to nix etc)
found_the_arg_switch=""
escaped_arguments_for_entry_file="'$(printf '%s' "$path_to_virkshop_entry" | sed 's/'"'"'/'"'"'"'"'"'"'"'"'/g')'"
for arg in "$@"; do
    # if the -- has not been found
    if [ -z "$found_the_arg_switch" ]
    then
        # if it is found
        if [ "$arg" = "--" ]
        then
            found_the_arg_switch="true"
        else
            # if in the future this script needs args this is where they would be parsed
            # for now there arent any
            true
        fi
    # once the -- has been found, the args go to the deno script
    else
        # need to escape the single quotes of each argument
        escaped_arguments_for_entry_file="$escaped_arguments_for_entry_file '$(printf '%s' "$arg" | sed 's/'"'"'/'"'"'"'"'"'"'"'"'/g')'"
    fi
done

# 
# execute enter_virkshop with a specific version of deno and pass along the arguments
# 
nix-shell --packages deno --run "deno run --allow-all $escaped_arguments_for_entry_file" -I nixpkgs=https://github.com/NixOS/nixpkgs/archive/7e9b0dff974c89e070da1ad85713ff3c20b0ca97.tar.gz

} # end: <- Prevent execution if this script was only partially downloaded