#!/usr/bin/env sh
'\' -split "\\" -join ""# 2>/dev/null; : "' /*
<#" deno_version="1.20.3"; deno_install="$HOME/.deno/$deno_version";deno="$deno_install/bin/deno"; filepath="$deno"; has () { [ ! -z "$(command -v "unzip")" ]; } ; if [ ! -f "$filepath" ] || [ ! -r "$filepath" ] || [ ! -x "$filepath" ]; then if ! has unzip; then could_auto_install="true"; if has apt-get; then if has brew; then could_auto_install="false"; else if ! brew install unzip; then could_auto_install="false"; fi; fi; else if [ "$(whoami)" = "root" ]; then if ! apt-get install unzip -y; then could_auto_install="false"; fi; elif [ -n "$(command -v "sudo")" ]; then echo "Can I install unzip for you? (its required for this command to work)";read ANSWER;echo; if [ ! "$ANSWER" =~ ^[Yy] ]; then could_auto_install="false"; else if ! sudo apt-get install unzip -y; then could_auto_install="false"; fi; fi; elif has doas; then echo "Can I install unzip for you? (its required for this command to work)";read ANSWER;echo; if [ ! "$ANSWER" =~ ^[Yy] ]; then could_auto_install="false"; else if ! doas apt-get install unzip -y; then could_auto_install="false"; fi; fi; else could_auto_install="false"; fi; fi; fi; if [ "$could_auto_install" = "false" ]; then echo "";echo "So I couldn't find an 'unzip' command";echo "And I tried to auto install it, but it seems that failed";echo "(This script needs unzip and either curl or wget)";echo "Please install the unzip command manually then re-run this script";exit 1; fi; if [ "$OS" = "Windows_NT" ]; then target="x86_64-pc-windows-msvc" else ; case $(uname -sm) in "Darwin x86_64") target="x86_64-apple-darwin" ;; "Darwin arm64") target="aarch64-apple-darwin" ;; *) target="x86_64-unknown-linux-gnu" ;; esac; fi; deno_uri="https://github.com/denoland/deno/releases/download/v$deno_version/deno-$target.zip"; bin_dir="$deno_install/bin"; exe="$bin_dir/deno"; if [ ! -d "$bin_dir" ]; then mkdir -p "$bin_dir"; fi; if has curl; then curl --fail --location --progress-bar --output "$exe.zip" "$deno_uri"; elif has curl ; then wget --output-document="$exe.zip" "$deno_uri"; else echo "Howdy! I looked for the 'curl' and for 'wget' commands but I didn't see either of them."; echo "Please install one of them"; echo "Otherwise I have no way to install the missing deno version needed to run this code"; fi; unzip -d "$bin_dir" -o "$exe.zip"; chmod +x "$exe"; rm "$exe.zip"; fi; "$deno" run -A "$0" "$@"; exit $? ; #> $deno_version = "1.19.0"; $env:DENO_INSTALL = "${HOME}/.deno/${deno_version}"; $deno = "${env:DENO_INSTALL}/bin/deno"; if (-not(Test-Path -Path "${deno}" -PathType Leaf)) { $v="${deno_version}"; iwr https://deno.land/x/install/install.ps1 -useb | iex; }; & "${deno}" run -A "${PSCommandPath}" @args; Exit $LastExitCode; #
*/;

// 
// 
// What is this file doing?
// 
// 
    // 1. validating the folder structure
    // 2. trying to install nix
    // 3. using nix to install the environment
    // 4. launching the environment as soon as possible

import { FileSystem } from "https://deno.land/x/quickr@0.2.1/main/file_system.js"
import { OperatingSystem } from "https://deno.land/x/quickr@0.2.1/main/operating_system.js"
import { run, hasCommand, throwIfFails, zipInto, mergeInto, returnAsString, Timeout, Env, Cwd, Stdin, Stdout, Stderr, Out, Overwrite, AppendTo } from "https://deno.land/x/quickr@0.2.1/main/run.js"
import { Console, clearStylesFrom, black, white, red, green, blue, yellow, cyan, magenta, lightBlack, lightWhite, lightRed, lightGreen, lightBlue, lightYellow, lightMagenta, lightCyan, blackBackground, whiteBackground, redBackground, greenBackground, blueBackground, yellowBackground, magentaBackground, cyanBackground, lightBlackBackground, lightRedBackground, lightGreenBackground, lightYellowBackground, lightBlueBackground, lightMagentaBackground, lightCyanBackground, lightWhiteBackground, bold, reset, dim, italic, underline, inverse, hidden, strikethrough, visible, gray, grey, lightGray, lightGrey, grayBackground, greyBackground, lightGrayBackground, lightGreyBackground, } from "https://deno.land/x/quickr@0.2.1/main/console.js"
const {move} = await import("https://deno.land/std@0.133.0/fs/mod.ts")

let projectFolder = FileSystem.makeAbsolutePath(`${FileSystem.thisFolder}/..`)
const projectName = FileSystem.basename(projectFolder)

if (OperatingSystem.commonChecks.isWindows) {
    // FIXME
    throw Error(`Not supported yet`)
}

// 
// fix the windows WSL mkfifo problem
// 
const mountCInfo = await FileSystem.info('/mnt/c')
if (mountCInfo.isFolder) {
    // 
    // check for mounting with metadata
    // 

    // check if metadata not enabled
    const result = await run("mount", "-l", Stdout(returnAsString))
    if (!result.match(/C: on \/mnt\/c.*metadata/)) {
        console.log('__________________________________________________________________________________')
        console.log('|                                                                                |')
        console.log('|  Howdy!                                                                        |')
        console.log('|                                                                                |')
        console.log('|  Looks like there`s a metadata hiccup/problem. It seems you`re using WSL       |')
        console.log('|  Sadly, for some reason, WSL doesn`t (by default) support many features of the |')
        console.log('|  linux file system. And For some reason, adding that support requires          |')
        console.log('|  re-mounting the C drive (within WSL) with metadata enabled.                   |')
        console.log('|                                                                                |')
        console.log('|  I`ll run the command automatically, but if you don`t want to put              |')
        console.log('|  your password in, cancel this (CTRL+C) and run the following yourself:        |')
        console.log('|                                                                                |')
        console.log('      {                                                                           ')
        console.log('          cd ; sudo umount /mnt/c && sudo mount -t drvfs C: /mnt/c -o metadata    ')
        console.log('      }                                                                           ')
        console.log('|                                                                                |')
        console.log('|  Then re-run this script                                                       |')
        console.log('|  You can read more about this problem here if you like:                        |')
        console.log('|  https://devblogs.microsoft.com/commandline/chmod-chown-wsl-improvements/      |')
        console.log('|                                                                                |')
        console.log('----------------------------------------------------------------------------------')
        console.log('')
        Console.askFor.confirmation('Continue?')
        // this means we need to unmount and remount with metadata enabled
        const originalDirectory = FileSystem.pwd
        Deno.chdir(FileSystem.home)
        var { success } = await run("sudo", "umount", "/mnt/c").outcome
        var { success } = await run("sudo", "mount", "-t", "drvfs", "C:", "/mnt/c", "-o", "metadata").outcome
        // TODO: add a check for an error ^here
        
        // go back
        Deno.chdir(originalDirectory)
    }
    
    // 
    // check if project is inside the windows C drive
    // 
    if (FileSystem.thisFolder.match(/^\/mnt\/c/)) {
        console.log('__________________________________________________________________________________')
        console.log('|                                                                                |')
        console.log('|  Howdy!                                                                        |')
        console.log('|                                                                                |')
        console.log('|  Looks like your project is saved in the windows file system                   |')
        console.log('|  (instead of the Linux/WSL file system)                                        |')
        console.log('|                                                                                |')
        console.log('|  This is a bit of a problem since the file systems of                          |')
        console.log('|  Linux/Mac/Android/ChromeBook/OpenBSD/etc have many features                   |')
        console.log('|  that the windows file system does not have.                                   |')
        console.log('|                                                                                |')
        console.log('|  Would it be okay if I move this project?                                      |')
        console.log('|      I`ll create a shortcut to it so you can still find it.                    |')
        console.log('|      https://devblogs.microsoft.com/commandline/chmod-chown-wsl-improvements/  |')
        console.log('|                                                                                |')
        console.log('----------------------------------------------------------------------------------')
        const answeredYes = await Console.askFor.yesNo("[y/n]")
        if (!answeredYes) {
            console.log()
            console.log('okay, in that case just re-run this command whenever')
            console.log('you have moved the project to the linux file system')
            console.log('    ')
            console.log('    if youre confused about what that^ means')
            console.log('    take a look at the "documentation" folder (inside of this project folder)')
            console.log()
            Deno.exit()
        } else {
            // 
            // where to move project
            // 
            let newProjectLocation, answeredYes
            while (true) {
                newProjectLocation = `${FileSystem.home}/repos/${projectName}`
                answeredYes = await Console.askFor.yesNo(`Is it okay if I move the project to: ${yellow`${newProjectLocation}`}?`)
                if (!answeredYes) {
                    console.log()
                    newProjectLocation = await Console.askFor.line("Okay where should I move it? ")
                } else {
                    break
                }
            }
            // 
            // move the project
            // 
            await FileSystem.clearAPathFor(newProjectLocation)
            await move(projectFolder, newProjectLocation)
            // create a link from the old location to the new location so they can still access the project
            await FileSystem.relativeLink({
                existingItem: newProjectLocation,
                newItem: projectFolder,
            })
            projectFolder = newProjectLocation
        }
    }
}

# 
# 
# Color Test
# 
#
color_test_cache_location="$HOME/.config/answered_questions/does_color_test_work"
# check if already answered this questions
if [ -f "$color_test_cache_location" ]
then
    ANSWER="$(cat "$color_test_cache_location")"
fi
# ensure the answer is well-formed
while true; do
    case "$ANSWER" in
        [Yy]* ) ANSWER='yes'; break;;
        [Nn]* ) ANSWER='no'; break;;
        * ) echo "${newline}Please answer yes or no. ${newline}";;
    esac
    echo "                                   "
    echo "               COLOR TEST              "
    echo "          |------------------|"
    echo "          |     $(red) red $(color_reset)        |"
    echo "          |     $(green) green $(color_reset)      |"
    echo "          |     $(yellow) yellow $(color_reset)     |"
    echo "          |     $(blue) blue $(color_reset)       |"
    echo "          |     $(magenta) magenta $(color_reset)    |"
    echo "          |     $(cyan) cyan $(color_reset)       |"
    echo "          |------------------|"
    echo "     
          Does this look good?
  (there should be one color per line)
    "; printf "yes/no:";
    read ANSWER
done

# create the cache file
mkdir -p "$(dirname "$color_test_cache_location")"
echo "$ANSWER" > "$color_test_cache_location"
# NOTE: this^ doesn't cover the edgecase of one of the parent "folders"
#       actually being a file, which would cause a failure
#       in the future lets plan to do a corruption check on this structure

# 
# if colors don't work/look good
# 
if [ "$answer" = 'no' ]
then
    echo " :( Okay I'll disable color"
    black      () { :; }
    red        () { :; }
    green      () { :; }
    yellow     () { :; }
    blue       () { :; }
    magenta    () { :; }
    cyan       () { :; }
    white      () { :; }
    color_reset() { :; }
fi


# 
# if nix doesnt exist
# 
if [ -z "$(command -v "nix")" ]
then
    echo "|------------------------------------------------------|"
    echo "|                                                      |"
    echo "|    I'll try to install nix for you                   |"
    echo "|    (since I don't see nix yet)                       |"
    echo "|                                                      |"
    echo "|------------------------------------------------------|"
    echo ""
    # check for root
    if [ "$(whoami)" = "root" ]
    then
        echo "$(yellow)"
        echo "looks like you're logged in as root"
        echo "sadly nix can't install on the root user"
        echo "please use a regular user, then re-run this script"
        echo "$(color_reset)"
        # if users exists
        if [ -n "$(command -v "cut")" ]
        then
            users="$(grep '^sudo:.*$' /etc/group | cut -d: -f4)"
            if [ -n "$users" ] && [ "$users" != "root" ] && [ "$users" != "root root" ]
            then
                echo "the available users are:"
                grep '^sudo:.*$' /etc/group | cut -d: -f4
                echo "you should be able to run $(cyan)su $(yellow)USER_NAME$(color_reset)"
                echo "to login as one of those users"
            else
                echo ""
                echo "it looks like this system doesn't have any regular users"
                
                # if useradd exists
                if [ -n "$(command -v "useradd")" ]
                then
                    question="do you want me to make a regular user for you? [y/n]";answer=''
                    while true; do
                        echo "$question"; read response
                        case "$response" in
                            [Yy]* ) answer='yes'; break;;
                            [Nn]* ) answer='no'; break;;
                            * ) echo "Please answer yes or no.";;
                        esac
                    done
                    
                    if [ "$answer" = 'yes' ]; then
                        echo "$(magenta)Enter a username:$(color_reset)"
                        read username
                        if sudo useradd --create-home "$username" --password "password" --groups sudo
                        then
                            echo ""
                            echo "user created successfully"
                            echo "run:"
                            echo "    $(cyan)sudo passwd "$username"$(color_reset)"
                            echo "to set the password"
                        else
                            echo ""
                            echo "Sorry, there was an error when creating the user"
                            echo "I used this command: $(cyan)sudo useradd --create-home "'"'"$username"'"'" --password 'password' --groups sudo$(color_reset)"
                        fi
                    else
                        echo "Okay"
                    fi
                fi
                
            fi
        fi
        echo ""
        echo "login as the non-root user ($(cyan)su USERNAME$(color_reset))"
        echo "then re-run this command"
        exit
    fi
    #       
    # MacOS 
    #
    if [ "$(uname)" = "Darwin" ]
    then
        debugging_info="$debugging_info$newline""I think you have a Mac because "'"$OSTYPE" = "darwin"*'" came back true"
        full_version="$(sw_vers -productVersion)"
        major_version="$(echo "$full_version" | sed -E 's/([0-9]+)\.[0-9]+\.[0-9]+/\1/g')"
        minor_version="$(echo "$full_version" | sed -E 's/[0-9]+\.([0-9]+)\.[0-9]+/\1/g')"
        #                  
        # Big Sur or Newer
        #                 
        if [ "$major_version" = "11" ]; then
            sh <(curl -Lk https://releases.nixos.org/nix/nix-2.3.8/install) --darwin-use-unencrypted-nix-store-volume
        #                  
        # Older than Big Sur (Catalina, Mojave, High Siera, Siera, etc)
        #                 
        elif [ "$major_version" -eq "10" ]; then
            # Catalina
            if [ "$minor_version" = "15" ]; then
                sh <(curl -Lk https://releases.nixos.org/nix/nix-2.3.8/install) --darwin-use-unencrypted-nix-store-volume
            # Mojave, High Siera, Siera, and might work on even older versions (Yosemite, Mavericks)
            else
                curl -Lk https://releases.nixos.org/nix/nix-2.3.8/install | sh -s -- --daemon
            fi
        else
            echo 'We tried to get you MacOS version by running `sw_vers -productVersion`'
            echo '(which returns '"$full_version"')'
            echo "Either 1. that value is empty 2. You're on an insanely old version 3. You're on a version way way in the future from when this script was made"
        fi
    # assuming Linux/POSIX if not on MacOS
    else
        # if curl doesnt exist, try to make it exist
        if [ -z "$(command -v "curl")" ]
        then
            # if apt-get exists
            if [ -n "$(command -v "apt-get")" ]
            then
                sudo apt-get update && sudo apt-get install curl
            else
                echo "it looks like you don't have curl, please install curl then re-run this script" 1>&2
                echo "alternatively, to get nix, manually run the commands inside https://releases.nixos.org/nix/nix-2.3.8/install" 1>&2
            fi
        fi
        
        # if now curl exists
        if [ -n "$(command -v "curl")" ]
        then
            # prefer single-user (no shell reload)
            curl -L https://releases.nixos.org/nix/nix-2.3.8/install | sh -s
            # # check if systemd exists
            # if pidof systemd
            # then
            #     # multi-user install if systemd exists
            #     curl -Lk https://releases.nixos.org/nix/nix-2.3.8/install | sh -s -- --daemon
            # else
            #     # single-user install if systemd exists
            #     curl -L https://releases.nixos.org/nix/nix-2.3.8/install | sh
            #     # curl -Lk https://releases.nixos.org/nix/nix-2.3.8/install | sh -s
            # fi
        fi
    fi
fi

# 
# if nix was not installed
# 
if ! [ -d "/nix/store" ]
then
    echo "$(yellow)"
    echo "|-- Problem ------------------------------------------------------------------------------------| $(color_reset)" 1>&2
    echo "|                                                                                               |" 1>&2
    echo "|    Looks like there was a problem installing nix :/                                           |" 1>&2
    echo "|    Hopefully there are error messages above                                                   |" 1>&2
    echo "|    If you want additional information about installing nix see:                               |" 1>&2
    echo "|         https://nixos.org/manual/nix/stable/#chap-installation                                |" 1>&2
    echo "|                                                                                               |" 1>&2
    echo "|-----------------------------------------------------------------------------------------------|" 1>&2
    echo ""
    exit
# if nix was installed (hopefully successfully)
else
    # 
    # manually update the shell environment 
    # 
    if [ -f "/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh" ]
    then
        . "/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh"
    fi
    if [ -f "$HOME/.nix-profile/etc/profile.d/nix.sh" ]
    then
        . "$HOME/.nix-profile/etc/profile.d/nix.sh"
    fi
    export PATH="$PATH:/nix/var/nix/profiles/default/bin/"
    
    # if nix-env doesnt exist
    if [ -z "$(command -v "nix-env")" ] || [ -z "$(command -v "nix-shell")" ]
    then
        echo "$(yellow)"
        echo "|-- Action Needed ------------------------------------------------------------------------------| $(color_reset)" 1>&2
        echo "|                                                                                               |" 1>&2
        echo "|    - Try closing/reopening your terminal and running this command again                       |" 1>&2
        echo "|      (I dont see the nix-env and nix-shell command)                                           |" 1>&2
        echo "|                                                                                               |" 1>&2
        echo "|    - If you already did that, and you're still getting this message                           |" 1>&2
        echo "|      then you might need to uninstall and reinstall nix                                       |" 1>&2
        echo "|      instructions here:                                                                       |" 1>&2
        echo "|         https://nixos.org/manual/nix/stable/#sect-single-user-installation                    |" 1>&2
        echo "|                                                                                               |" 1>&2
        echo "|-----------------------------------------------------------------------------------------------|" 1>&2
        echo ""
        exit
    fi
fi

# 
# 
# Nix should now be installed => Enter the virkshop!
# 
# 

# 
# Find our virkshop config
# 
path_to_virkshop_config=""
file_name="virkshop/mixins/#core/settings/virkshop/"
folder_to_look_in="$PWD"
while :
do
    # check if file exists
    if [ -e "$folder_to_look_in/$file_name" ]
    then
        path_to_virkshop_config="$folder_to_look_in/$file_name"
        break
    else
        if [ "$folder_to_look_in" = "/" ]
        then
            break
        else
            folder_to_look_in="$(dirname "$folder_to_look_in")"
        fi
    fi
done
if [ -z "$path_to_virkshop_config" ]
then
    #
    # what to do if file never found
    #
    echo "$(yellow)"
    echo "|-- Problem -------------------------------------------------------------------| $(color_reset)" 1>&2
    echo "|                                                                              |" 1>&2
    echo "|    Looks like you have nix installed (that's good)                           |" 1>&2
    echo "|                                                                              |" 1>&2
    echo "|    However, I can't find the virkshop/mixins/#core/settings/virkshop/ folder |" 1>&2
    echo "|    I started looking in your current folder                                  |" 1>&2
    echo "|         current directory is: '$PWD'                                         " 1>&2
    echo "|    I also looked in all the parent folders, but couldn't find it             |" 1>&2
    echo "|                                                                              |" 1>&2
    echo "|    todo:                                                                     |" 1>&2
    echo "|      - make sure you're in the right folder (likely to be the problem)       |" 1>&2
    echo "|      - make sure the virkshop folder isn't corrupted (re-download)           |" 1>&2
    echo "|                                                                              |" 1>&2
    echo "|------------------------------------------------------------------------------|" 1>&2
    echo ""
    # TODO: in the future, offer to redownload (encase the script is being run directly from curl)
    # TODO: in the future, check if already inside of a virkshop (accidentally doing virkshop inception)
    exit
fi

# 
# find virkshop entrypoint
# 
export VIRKSHOP_FOLDER="$path_to_virkshop_config/../../../.."
path_to_virkshop_entry="$VIRKSHOP_FOLDER/$(cat "$path_to_virkshop_config/path_to/entry_point")"
# TODO: add a check to make sure the config isn't corrupt

# 
# check if entry_point exists
# 
if ! [ -f "$path_to_virkshop_entry" ]
then
    echo "$(yellow)"
    echo "|-- Problem ------------------------------------------------------------------| $(color_reset)" 1>&2
    echo "|                                                                             |" 1>&2
    echo "|    I was looking for the virkshop entry_point but I couldnt find it         |" 1>&2
    echo "|                                                                             |" 1>&2
    echo "|    The config (virkshop/mixins/#core/settings/virkshop/path_to/entry_point) |" 1>&2
    echo "|    says that the file is at: '$path_to_virkshop_entry'                       " 1>&2
    echo "|    But that doesn't seem to be a file                                       |" 1>&2
    echo "|                                                                             |" 1>&2
    echo "|    todo:                                                                    |" 1>&2
    echo "|      - make sure the virkshop folder isn't corrupted (re-download)          |" 1>&2
    echo "|                                                                             |" 1>&2
    echo "|-----------------------------------------------------------------------------|" 1>&2
    exit
fi

# make sure the file is executable
if [ -n "$(command -v "chmod")" ]
then
    # if sudo exists
    if [ -n "$(command -v "sudo")" ]
    then
        chmod ugo+x "$path_to_virkshop_entry" 2>/dev/null || sudo chmod ugo+x "$path_to_virkshop_entry"
    # if doas exists
    elif [ -n "$(command -v "doas")" ]
    then
        chmod ugo+x "$path_to_virkshop_entry" 2>/dev/null || doas chmod ugo+x "$path_to_virkshop_entry"
    # if neither exist
    else
        chmod ugo+x "$path_to_virkshop_entry" 2>/dev/null
    fi
fi

# 
# parse and escape the arguments
# 
arguments_for_start_script="" # futureproofing encase this script needs args (verbose/debugging/alternatives to nix etc)
found_the_arg_switch=""
escaped_arguments_for_entry_file="'$(printf '%s' "$path_to_virkshop_entry" | sed 's/'"'"'/'"'"'"'"'"'"'"'"'/g')'"
for arg in "$@"; do
    # if the -- has not been found
    if [ -z "$found_the_arg_switch" ]
    then
        # if it is found
        if [ "$arg" = "--" ]
        then
            found_the_arg_switch="true"
        else
            # if in the future this script needs args this is where they would be parsed
            # for now there arent any
            true
        fi
    # once the -- has been found, the args go to the deno script
    else
        # need to escape the single quotes of each argument
        escaped_arguments_for_entry_file="$escaped_arguments_for_entry_file '$(printf '%s' "$arg" | sed 's/'"'"'/'"'"'"'"'"'"'"'"'/g')'"
    fi
done

# 
# execute enter_virkshop with a specific version of deno and pass along the arguments
# 
nix-shell --packages deno bash --run "$escaped_arguments_for_entry_file" -I nixpkgs=https://github.com/NixOS/nixpkgs/archive/c82b46413401efa740a0b994f52e9903a4f6dcd5.tar.gz

} # end: <- Prevent execution if this script was only partially downloaded