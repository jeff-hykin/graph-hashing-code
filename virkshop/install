#!/usr/bin/env sh
"\"",`$(echo --% ' |out-null)" >$null;function :{};function dv{<#${/*'>/dev/null )` 2>/dev/null;dv() { #>
echo "1.22.0"; : --% ' |out-null <#';};v="$(dv)";d="$HOME/.deno/$v/bin/deno";if [ -x "$d" ];then exec "$d" run -q -A "$0" "$@";elif [ -f "$d" ];then chmod +x "$d" && exec "$d" run -q -A "$0" "$@";fi;bin_dir="$HOME/.deno/$v/bin";exe="$bin_dir/deno";has() { command -v "$1" >/dev/null; };if ! has unzip;then :;if ! has apt-get;then has brew && brew install unzip;else if [ "$(whoami)" = "root" ];then apt-get install unzip -y;elif has sudo;then echo "Can I install unzip for you? (its required for this command to work) ";read ANSWER;echo;if [ "$ANSWER" =~ ^[Yy] ];then sudo apt-get install unzip -y;fi;elif has doas;then echo "Can I install unzip for you? (its required for this command to work) ";read ANSWER;echo;if [ "$ANSWER" =~ ^[Yy] ];then doas apt-get install unzip -y;fi;fi;fi;fi;if ! has unzip;then echo "";echo "So I couldn't find an 'unzip' command";echo "And I tried to auto install it, but it seems that failed";echo "(This script needs unzip and either curl or wget)";echo "Please install the unzip command manually then re-run this script";exit 1;fi;if [ "$OS" = "Windows_NT" ];then target="x86_64-pc-windows-msvc";else :; case $(uname -sm) in "Darwin x86_64") target="x86_64-apple-darwin" ;; "Darwin arm64") target="aarch64-apple-darwin" ;; *) target="x86_64-unknown-linux-gnu" ;; esac;fi;deno_uri="https://github.com/denoland/deno/releases/download/v$v/deno-$target.zip";if [ ! -d "$bin_dir" ];then mkdir -p "$bin_dir";fi;if has curl;then curl --fail --location --progress-bar --output "$exe.zip" "$deno_uri";elif has wget;then wget --output-document="$exe.zip" "$deno_uri";else echo "Howdy! I looked for the 'curl' and for 'wget' commands but I didn't see either of them.";echo "Please install one of them";echo "Otherwise I have no way to install the missing deno version needed to run this code";fi;unzip -d "$bin_dir" -o "$exe.zip";chmod +x "$exe";rm "$exe.zip";exec "$d" run -q -A "$0" "$@"; #>};$DenoInstall = "${HOME}\.deno$(dv)";$BinDir = "$DenoInstall\bin"; $DenoExe = "$BinDir\deno.exe"; if (-not(Test-Path -Path "$DenoExe" -PathType Leaf)) { $DenoZip = "$BinDir\deno.zip";$DenoUri = "https://github.com/denoland/deno/releases/download/v$(dv)/deno-x86_64-pc-windows-msvc.zip";[Net.ServicePointManager]::SecurityProtocol=[Net.SecurityProtocolType]::Tls12;if(!(Test-Path $BinDir)){ New-Item $BinDir -ItemType Directory |Out-Null;};curl.exe -Lo $DenoZip $DenoUri;tar.exe xf $DenoZip -C $BinDir; Remove-Item $DenoZip;$User = [EnvironmentVariableTarget]::User; $Path = [Environment]::GetEnvironmentVariable('Path', $User); if (!(";$Path;".ToLower() -like "*;$BinDir;*".ToLower())) { [Environment]::SetEnvironmentVariable('Path', "$Path;$BinDir", $User); $Env:Path += ";$BinDir"; } }; & "$DenoExe" run -q -A "$PSCommandPath" @args; Exit $LastExitCode;# */0}`;
// */}`

import { OperatingSystem } from "https://deno.land/x/quickr@0.4.8/main/operating_system.js"
import { FileSystem } from "https://deno.land/x/quickr@0.4.8/main/file_system.js"
import { run, hasCommand, throwIfFails, zipInto, mergeInto, returnAsString, Timeout, Env, Cwd, Stdin, Stdout, Stderr, Out, Overwrite, AppendTo } from "https://deno.land/x/quickr@0.4.8/main/run.js"
import { Console, clearStylesFrom, black, white, red, green, blue, yellow, cyan, magenta, lightBlack, lightWhite, lightRed, lightGreen, lightBlue, lightYellow, lightMagenta, lightCyan, blackBackground, whiteBackground, redBackground, greenBackground, blueBackground, yellowBackground, magentaBackground, cyanBackground, lightBlackBackground, lightRedBackground, lightGreenBackground, lightYellowBackground, lightBlueBackground, lightMagentaBackground, lightCyanBackground, lightWhiteBackground, bold, reset, dim, italic, underline, inverse, hidden, strikethrough, visible, gray, grey, lightGray, lightGrey, grayBackground, greyBackground, lightGrayBackground, lightGreyBackground, } from "https://deno.land/x/quickr@0.4.8/main/console.js"
import { move as moveAndRename } from "https://deno.land/std@0.133.0/fs/mod.ts"
import * as Path from "https://deno.land/std@0.128.0/path/mod.ts"
import { zip } from "https://deno.land/x/good@0.7.7/array.js"
import { virkshop, parsePackageTools } from "./virkshop.js"
import { nix } from "./nix_tools.js"

// 
// start some async ops
// 
    // schedule file read
    const currentSystemToolsPromise = parsePackageTools(virkshop.pathTo.systemTools)

// 
// pre-check
// 
    console.log("checking nix installation")
    await nix.ensureInstalled()

// 
// main code
// 
    const packageName = Deno.args[0]
    // TODO: check if package was already in the yaml file
    // TODO: add argument for specifying where the package came from
    const currentSystemTools = await currentSystemToolsPromise
    yaml.parse(yamlString)
    console.log("waiting on response from nix...")
    const resultString =  await run('nix-env', '-qa', packageName, "--json", Stdout(returnAsString))
    if (resultString) {
        const results = JSON.parse(resultString)
        const packageAttributeNames = Object.entries(results).map(([key, value])=>key.replace(/^nixpkgs\.(.+)/,"$1"))
        const packageCommonNames = Object.entries(results).map(([key, value])=>value.pname)
        const packageVersions = Object.entries(results).map(([key, value])=>value.version)
        if (packageAttributeNames.includes(packageName)) {
            console.log("found exact match")
            const currentSystemTools = await currentSystemToolsPromise
            await FileSystem.write({
                path: virkshop.pathTo.systemTools,
                data: currentSystemTools+`
                    
                    - (package):
                        asBuildInput: true
                        load: [ ${JSON.stringify(packageName)},]
                `.replace(/\n                    /g, "\n"),
            })
            const relativePath = FileSystem.makeRelativePath({from: FileSystem.pwd, to: virkshop.pathTo.systemTools})
            console.log(`Package successfully added to ${relativePath.path||relativePath}`)
        } else {
            console.log("Here are some similar names, re-run with one of them")
            for (const [ attribute, commonName, version ] of zip(packageAttributeNames, packageCommonNames, packageVersions)) {
                console.log(`    ${attribute} (commonName:${commonName}, version:${version})`)
            }
        }
        Deno.exit(0)
    }
    console.log("Sorry I don't see that package :/")
    
    // {
    // "nixpkgs.firefox-esr": {
    //     "name": "firefox-102.3.0esr",
    //     "pname": "firefox",
    //     "version": "102.3.0esr",
    //     "system": "aarch64-darwin",
    //     "outputName": "out",
    //     "outputs": {
    //     "out": null
    //     }
    // },
    // "nixpkgs.firefox-esr-wayland": {
    //     "name": "firefox-102.3.0esr",
    //     "pname": "firefox",
    //     "version": "102.3.0esr",
    //     "system": "aarch64-darwin",
    //     "outputName": "out",
    //     "outputs": {
    //     "out": null
    //     }
    // },
    // "nixpkgs.firefox": {
    //     "name": "firefox-105.0.3",
    //     "pname": "firefox",
    //     "version": "105.0.3",
    //     "system": "aarch64-darwin",
    //     "outputName": "out",
    //     "outputs": {
    //     "out": null
    //     }
    // },
    // "nixpkgs.firefox-wayland": {
    //     "name": "firefox-105.0.3",
    //     "pname": "firefox",
    //     "version": "105.0.3",
    //     "system": "aarch64-darwin",
    //     "outputName": "out",
    //     "outputs": {
    //     "out": null
    //     }
    // }
    // }